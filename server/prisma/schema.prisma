generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  WRITER
  ADMIN
  DEVELOPER
}

model User {
  id                       String                   @id @default(uuid())
  email                    String                   @unique
  password                 String
  article                  Article[]
  articleLikes             ArticleLike[]
  articleComments          ArticleComment[]
  articleCommentLikes      ArticleCommentLike[]
  articleItemComments      ArticleItemComment[]
  articleItemLike          ArticleItemLike[]
  articleItemCommentsLikes ArticleItemCommentLike[]
  role                     Role                     @default(USER)
  createdEvents            Event[]                  @relation("createdEvents")
  receivedEvents           Event[]                  @relation("receivedEvents")
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime?                @updatedAt
}

model Article {
  id                 String               @id @default(uuid())
  articleItems       ArticleItem[]
  comments           ArticleComment[]
  likes              ArticleLike[]
  articleHeaderImage ArticleHeaderImage[]
  User               User?                @relation(fields: [userId], references: [id])
  userId             String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
}

model ArticleItem {
  id             String               @id @default(uuid())
  articleTitle   String
  articleContent String
  articleAuthor  String
  articleType    String
  articleTags    String
  articleImages  ArticleImage[]
  articleId      String
  comments       ArticleItemComment[]
  likes          ArticleItemLike[]
  article        Article              @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime?            @updatedAt
}

model ArticleHeaderImage {
  id         String    @id @default(uuid())
  imageUrl   String
  imageTitle String
  articleId  String
  article    Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model ArticleImage {
  id            String      @id @default(uuid())
  imageUrl      String
  imageTitle    String
  articleItemId String
  articleItem   ArticleItem @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model ArticleComment {
  id        String               @id @default(uuid())
  content   String               @db.VarChar(250)
  userId    String
  user      User                 @relation(fields: [userId], references: [id])
  articleId String
  article   Article              @relation(fields: [articleId], references: [id], onDelete: Cascade)
  likes     ArticleCommentLike[]
  createdAt DateTime             @default(now())
  updatedAt DateTime?            @updatedAt
}

model ArticleItemComment {
  id            String                   @id @default(uuid())
  content       String                   @db.VarChar(250)
  userId        String
  user          User                     @relation(fields: [userId], references: [id])
  articleItemId String
  articleItem   ArticleItem              @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  likes         ArticleItemCommentLike[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime?                @updatedAt
}

model ArticleLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a composite unique constraint on userId and commentId
  @@unique([userId, articleId])
}

model ArticleItemLike {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  articleItem   ArticleItem @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  articleItemId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Define a composite unique constraint on userId and commentId
  @@unique([userId, articleItemId])
}

model ArticleCommentLike {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  articleComment   ArticleComment @relation(fields: [articleCommentId], references: [id], onDelete: Cascade)
  articleCommentId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Define a composite unique constraint on userId and commentId
  @@unique([userId, articleCommentId])
}

model ArticleItemCommentLike {
  id                   String             @id @default(uuid())
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  articleItemComment   ArticleItemComment @relation(fields: [articleItemCommentId], references: [id], onDelete: Cascade)
  articleItemCommentId String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Define a composite unique constraint on userId and commentId
  @@unique([userId, articleItemCommentId])
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
