generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  WRITER
  ADMIN
  DEVELOPER
}

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique @db.VarChar(255)
  password                String                   @db.VarChar(255)
  articles                Article[]
  articleLikes            ArticleLike[]
  articleComments         ArticleComment[]
  articleCommentLikes     ArticleCommentLike[]
  articleItemComments     ArticleItemComment[]
  articleItemLikes        ArticleItemLike[]
  articleItemCommentLikes ArticleItemCommentLike[]
  role                    Role                     @default(USER)
  createdEvents           Event[]                  @relation("createdEvents")
  receivedEvents          Event[]                  @relation("receivedEvents")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime?                @updatedAt
}

enum ArticleType {
  RELATIONSHIPS
  SCIENCE
  HISTORY
  MEMES
  FUNNY
  COOKING
  TRAVEL
  WAR
  SPORTS
  TECHNOLOGY
  NEWS
  OPINION
}

model Article {
  id           String               @id @default(uuid())
  title        String               @db.VarChar(255)
  author       String               @db.VarChar(255)
  type         ArticleType[]
  tags         String[]             @db.VarChar(255)
  items        ArticleItem[]
  comments     ArticleComment[]
  likes        ArticleLike[]
  headerImages ArticleHeaderImage[]
  user         User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime?            @updatedAt
}

model ArticleItem {
  id        String               @id @default(uuid())
  content   String               @db.Text
  images    ArticleImage[]
  article   Article              @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  comments  ArticleItemComment[]
  likes     ArticleItemLike[]
  createdAt DateTime             @default(now())
  updatedAt DateTime?            @updatedAt
}

model ArticleHeaderImage {
  id        String    @id @default(uuid())
  url       String    @db.VarChar(255)
  title     String    @db.VarChar(255)
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ArticleImage {
  id            String      @id @default(uuid())
  url           String      @db.VarChar(255)
  title         String      @db.VarChar(255)
  articleItem   ArticleItem @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  articleItemId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model ArticleComment {
  id        String               @id @default(uuid())
  content   String               @db.VarChar(250)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article              @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  likes     ArticleCommentLike[]
  createdAt DateTime             @default(now())
  updatedAt DateTime?            @updatedAt
}

model ArticleItemComment {
  id            String                   @id @default(uuid())
  content       String                   @db.VarChar(250)
  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  articleItem   ArticleItem              @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  articleItemId String
  likes         ArticleItemCommentLike[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime?                @updatedAt
}

enum ArticleRewardType {
  DISLIKED0
  UNGRADED1
  LIKED2
  SUPERLIKED3
  LOVED4
  PERFECT5
}

model ArticleLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
}

model ArticleItemLike {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  articleItem   ArticleItem @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  articleItemId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, articleItemId])
}

model ArticleCommentLike {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  articleComment   ArticleComment @relation(fields: [articleCommentId], references: [id], onDelete: Cascade)
  articleCommentId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([userId, articleCommentId])
}

model ArticleItemCommentLike {
  id                   String             @id @default(uuid())
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  articleItemComment   ArticleItemComment @relation(fields: [articleItemCommentId], references: [id], onDelete: Cascade)
  articleItemCommentId String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@unique([userId, articleItemCommentId])
}

enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?   @db.VarChar(255)
  code         Int?
  content      String?   @db.VarChar(255)
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
