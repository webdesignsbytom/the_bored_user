generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  WRITER
  ADMIN
  DEVELOPER
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  article        Article[]
  comments       Comment[]
  likes          Like[]
  role           Role      @default(USER)
  createdEvents  Event[]   @relation("createdEvents")
  receivedEvents Event[]   @relation("receivedEvents")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model Article {
  id           String        @id @default(uuid())
  articleItems ArticleItem[]
  comments     Comment[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
}

model ArticleItem {
  id             String         @id @default(uuid())
  articleTitle   String
  articleContent String
  articleAuthor  String
  articleType    String
  articleTags    String
  articleImages  ArticleImage[]
  articleId      String
  comments       Comment[]
  likes          Like[]
  article        Article        @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
}

model ArticleImage {
  id            String      @id @default(uuid())
  imageUrl      String
  imageTitle    String
  articleItemId String
  comments      Comment[]
  articleItem   ArticleItem @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Comment {
  id             String        @id @default(uuid())
  content        String        @db.VarChar(250)
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  articleId      String
  article        Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleItemId  String
  articleItem    ArticleItem   @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  likes          Like[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  ArticleImage   ArticleImage? @relation(fields: [articleImageId], references: [id])
  articleImageId String?
}

model Like {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  comment       Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String
  articleItem   ArticleItem @relation(fields: [articleItemId], references: [id], onDelete: Cascade)
  articleItemId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Define a composite unique constraint on userId and commentId
  @@unique([userId, commentId])
  @@unique([userId, articleItemId])
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
